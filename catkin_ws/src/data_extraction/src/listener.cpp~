/*add the .h file of any additional topic to this list (compare sensor_msgs/Temperature.h) */

#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/Temperature.h"
#include "sensor_msgs/Imu.h"
#include "sensor_msgs/FluidPressure.h"
#include "mavros_msgs/WaypointList.h"
#include <iostream>
#include <iomanip>
#include <fstream>

/*NOTES:
mavros/mission/waypoints: problem with message types; currently unresolved (not compiling if uncommented)
*/

/*--------------------------------------------------------------------------*/

/*Listener class: contains the subscribers */

class Listener{
	public:
		void tempCallback(const sensor_msgs::Temperature::ConstPtr& tmp_clbc); //subscriber imu/temp
		void imuCallback(const sensor_msgs::Imu::ConstPtr& imu_clbc); //subscriber imu/raw
		void mavrosAtmPressureCallback(const sensor_msgs::FluidPressure::ConstPtr& mavros_atm_pres_clbc); //subscriber mavros/atm_pressure
		void mavTempCallback(const sensor_msgs::Temperature::ConstPtr& mavtmp_clbc); //subscriber mavros/imu/temp
		//void missionWaypointCallback(const mavros_msgs::WaypointList::ConstPtr& waypntlst_clbc); //subscriber mavros/mission/waypoints NOTE: SEQUENCE NR NOT AVAILABLE
		std::vector<float> & getTemperature();
		std::vector<int> & getSequenceNrTemp();
		std::vector<float> & getAngularVelocityX();
		std::vector<float> & getAngularVelocityY();
		std::vector<float> & getAngularVelocityZ();
		std::vector<float> & getOrientationX();
		std::vector<float> & getOrientationY();
		std::vector<float> & getOrientationZ();
		std::vector<float> & getOrientationW();
		std::vector<float> & getLinearAccelerationX();
		std::vector<float> & getLinearAccelerationY();
		std::vector<float> & getLinearAccelerationZ();
		std::vector<int> & getSequenceNrImu();
		std::vector<float> & getPressure();
		std::vector<int> & getSequenceNrMavPress();
		std::vector<float> & getMavTemperature();
		std::vector<int> & getMavSequenceNrTemp();
		//std::vector<float> & getXLat();
		//std::vector<float> & getYLong();
		//std::vector<float> & getZAlt();
	protected:
		std::vector<float> temp; //vector of the temperature measurements (/imu/temp)
		std::vector<int> seqnr_temp; //vector of sequence numbers (temperature) (/imu/temp)
		std::vector<float> angular_vel_x; //vector of the angular velocity x values (/imu/raw)
		std::vector<float> angular_vel_y; //vector of the angular velocity y values (/imu/raw)
		std::vector<float> angular_vel_z; //vector of the angular velocity z values (/imu/raw)
		std::vector<float> orientation_x; //vector of the orientation x values (/imu/raw)
		std::vector<float> orientation_y; //vector of the orientation y values (/imu/raw)
		std::vector<float> orientation_z; //vector of the orientation z values (/imu/raw)
		std::vector<float> orientation_w; //vector of the orientation w values (/imu/raw)
		std::vector<float> linear_acc_x; //vector of the linear acceleration x values (/imu/raw)
		std::vector<float> linear_acc_y; //vector of the linear acceleration y values (/imu/raw)
		std::vector<float> linear_acc_z; //vector of the linear acceleration z values (/imu/raw)
		std::vector<int> seqnr_imu; //vector of sequence numbers (IMU) (/imu/raw)
		std::vector<float> pressure; //vector of the fluid pressure values (mavros/atm_pressure)
		std::vector<int> seqnr_mav_pressure; //vector of the sequence numbers (mavros/atm_pressure)
		std::vector<float> mav_temp; //vector of the temperature measurements (mavros/imu/temp)
		std::vector<int> seqnr_mav_temp; //vector of the sequence numbers (mavros/imu/temp)
		//std::vector<float> x_lat; //vector of the latitude values (mavros/mission/waypoints)
		//std::vector<float> y_long; //vector of the longitude values (mavros/mission/waypoints)
		//std::vector<float> z_alt; //vector of the altitude values (mavros/mission/waypoints)
};

void Listener::tempCallback(const sensor_msgs::Temperature::ConstPtr& tmp_clbc){
	float temperature = tmp_clbc->temperature;
	this -> temp.push_back(temperature);
	std_msgs::Header hdr = tmp_clbc -> header;
	int sequence = hdr.seq;
	this -> seqnr_temp.push_back(sequence);
}

void Listener::imuCallback(const sensor_msgs::Imu::ConstPtr& imu_clbc){
	float angularx = imu_clbc -> angular_velocity.x;
	float angulary = imu_clbc -> angular_velocity.y;
	float angularz = imu_clbc -> angular_velocity.z;
	float orientationx = imu_clbc -> orientation.x;
	float orientationy = imu_clbc -> orientation.y;
	float orientationz = imu_clbc -> orientation.z;
	float orientationw = imu_clbc -> orientation.w;
	float linearx = imu_clbc -> linear_acceleration.x;
	float lineary = imu_clbc -> linear_acceleration.y;
	float linearz = imu_clbc -> linear_acceleration.z;
	this -> angular_vel_x.push_back(angularx);
	this -> angular_vel_y.push_back(angulary);
	this -> angular_vel_z.push_back(angularz);
	this -> orientation_x.push_back(orientationx);
	this -> orientation_y.push_back(orientationy);
	this -> orientation_z.push_back(orientationz);
	this -> orientation_w.push_back(orientationw);
	this -> linear_acc_x.push_back(linearx);
	this -> linear_acc_y.push_back(lineary);
	this -> linear_acc_z.push_back(linearz);
	std_msgs::Header hdr = imu_clbc -> header;
	int sequence = hdr.seq;
	this -> seqnr_imu.push_back(sequence);
}

void Listener::mavrosAtmPressureCallback(const sensor_msgs::FluidPressure::ConstPtr& mavros_atm_pres_clbc){
	float pressure = mavros_atm_pres_clbc -> fluid_pressure;
	this -> pressure.push_back(pressure);
	std_msgs::Header hdr = mavros_atm_pres_clbc -> header;
	int sequence = hdr.seq;
	this -> seqnr_mav_pressure.push_back(sequence);
}

void Listener::mavTempCallback(const sensor_msgs::Temperature::ConstPtr& mavtmp_clbc){
	float temperature = mavtmp_clbc->temperature;
	this -> mav_temp.push_back(temperature);
	std_msgs::Header hdr = mavtmp_clbc -> header;
	int sequence = hdr.seq;
	this -> seqnr_mav_temp.push_back(sequence);
}

/*void Listener::missionWaypointCallback(const mavros_msgs::WaypointList::ConstPtr& waypntlst_clbc){
	mavros_msgs::WaypointList waypoints = waypntlst_clbc -> waypoints;
	float x_lat = waypntlst_clbc-> waypoints.x_lat;
	float y_long = waypntlst_clbc-> waypoints.y_long;
	float z_alt = waypntlst_clbc-> waypoints.z_alt;
	this -> x_lat.push_back(x_lat);
	this -> y_long.push_back(y_long);
	this -> z_alt.push_back(z_alt);
}*/

std::vector<float> & Listener::getTemperature(){
	return this -> temp;
}

std::vector<int> & Listener::getSequenceNrTemp(){
	return this -> seqnr_temp;
}

std::vector<float> & Listener::getAngularVelocityX(){
	return this -> angular_vel_x;
}

std::vector<float> & Listener::getAngularVelocityY(){
	return this -> angular_vel_y;
}

std::vector<float> & Listener::getAngularVelocityZ(){
	return this -> angular_vel_z;
}

std::vector<float> & Listener::getOrientationX(){
	return this -> orientation_x;
}

std::vector<float> & Listener::getOrientationY(){
	return this -> orientation_y;
}

std::vector<float> & Listener::getOrientationZ(){
	return this -> orientation_z;
}

std::vector<float> & Listener::getOrientationW(){
	return this -> orientation_w;
}

std::vector<float> & Listener::getLinearAccelerationX(){
	return this -> linear_acc_x;
}

std::vector<float> & Listener::getLinearAccelerationY(){
	return this -> linear_acc_y;
}

std::vector<float> & Listener::getLinearAccelerationZ(){
	return this -> linear_acc_z;
}

std::vector<int> & Listener::getSequenceNrImu(){
	return this -> seqnr_imu;
}

std::vector<float> & Listener::getPressure(){
	return this -> pressure;
}

std::vector<int> & Listener::getSequenceNrMavPress(){
	return this -> seqnr_mav_pressure;
}

std::vector<float> & Listener::getMavTemperature(){
	return this -> mav_temp;
}

std::vector<int> & Listener::getMavSequenceNrTemp(){
	return this -> seqnr_mav_temp;
}

/*std::vector<float> & Listener::getXLat(){
	return this -> x_lat;
}

std::vector<float> & Listener::getYLong(){
	return this -> y_long;
}

std::vector<float> & Listener::getZAlt(){
	return this -> z_alt;
}*/

/*--------------------------------------------------------------------------*/

/*TempWriter class: writes the temperature data to csv file (includes a header row)*/

class TempWriter{
	public:
		void writer(std::vector<float> data, int length, std::vector<int> seqnr);
};

void TempWriter::writer(std::vector<float> data, int length, std::vector<int> seqnr){
	std::string filename = "tempdata";
	std::ofstream file(filename.c_str());
	if (file.is_open() == false){
		std::cout << "File could not be opened" << std::endl;
		throw;
	}
	file << "Sequence_nr" << ";" << "Temperature" << std::endl;
	for (int i = 0; i < length; i++){
		file << seqnr[i]  << ";" << data[i]<< std::endl;
	}
}

/*--------------------------------------------------------------------------*/

/*IMUWriter class: writes the IMU data to csv file (includes a header row)*/

class IMUWriter{
	public:
		void writer(std::vector<float> ang_vel_x, std::vector<float> ang_vel_y, std::vector<float> ang_vel_z, std::vector<float> ornt_x, std::vector<float> ornt_y, std::vector<float> ornt_z, std::vector<float> ornt_w, std::vector<float> linear_acc_x, std::vector<float> linear_acc_y, std::vector<float> linear_acc_z, int length, std::vector<int> seqnr);
};

void IMUWriter::writer(std::vector<float> ang_vel_x, std::vector<float> ang_vel_y, std::vector<float> ang_vel_z, std::vector<float> ornt_x, std::vector<float> ornt_y, std::vector<float> ornt_z, std::vector<float> ornt_w, std::vector<float> linear_acc_x, std::vector<float> linear_acc_y, std::vector<float> linear_acc_z, int length, std::vector<int> seqnr){
	std::string filename = "imudata";
	std::ofstream file(filename.c_str());
	if (file.is_open() == false){
		std::cout << "File could not be opened" << std::endl;
		throw;
	}
	file << "Sequence_nr" << ";" << "Angular_velocity_x" << ";" << "Angular_velocity_y" << ";" << "Angular_velocity_z" << ";" << "Orientation_x" << ";" << "Orientation_y" << ";" << "Orientation_z" << ";" << "Orientation_w" << ";" << "Linear_acceleration_x" << ";" << "Linear_acceleration_y" << ";" << "Linear_acceleration_z" << std::endl;
	for (int i = 0; i < length; i++){
		file << seqnr[i]  << ";" << ang_vel_x[i] << ";" << ang_vel_y[i] << ";" << ang_vel_z[i] << ";" << ornt_x[i] << ";" << ornt_y[i] << ";" << ornt_z[i] << ";" << ornt_w[i] << ";" << linear_acc_x[i] << ";" << linear_acc_y[i] << ";" << linear_acc_z[i] << std::endl;
	}
}

/*--------------------------------------------------------------------------*/

/*MavPressWriter class: writes the fluid pressure data to csv file (includes a header row)*/

class MavPressWriter{
	public:
		void writer(std::vector<float> data, int length, std::vector<int> seqnr);
};

void MavPressWriter::writer(std::vector<float> data, int length, std::vector<int> seqnr){
	std::string filename = "mavpressdata";
	std::ofstream file(filename.c_str());
	if (file.is_open() == false){
		std::cout << "File could not be opened" << std::endl;
		throw;
	}
	file << "Sequence_nr" << ";" << "Fluid_pressure" << std::endl;
	for (int i = 0; i < length; i++){
		file << seqnr[i]  << ";" << data[i]<< std::endl;
	}
}

/*--------------------------------------------------------------------------*/

/*MavTempWriter class: writes the temperature data to csv file (includes a header row)*/

class MavTempWriter{
	public:
		void writer(std::vector<float> data, int length, std::vector<int> seqnr);
};

void MavTempWriter::writer(std::vector<float> data, int length, std::vector<int> seqnr){
	std::string filename = "mavtempdata";
	std::ofstream file(filename.c_str());
	if (file.is_open() == false){
		std::cout << "File could not be opened" << std::endl;
		throw;
	}
	file << "Sequence_nr" << ";" << "Temperature" << std::endl;
	for (int i = 0; i < length; i++){
		file << seqnr[i]  << ";" << data[i]<< std::endl;
	}
}

/*--------------------------------------------------------------------------*/

/*MissionWaypointWriter class: writes the temperature data to csv file (includes a header row)*/

/*class MissionWaypointWriter{
	public:
		void writer(std::vector<float> x_lat, std::vector<float> y_long, std::vector<float> z_alt, int length);
};

void MissionWaypointWriter::writer(std::vector<float> x_lat, std::vector<float> y_long, std::vector<float> z_alt, int length){
	std::string filename = "mavtempdata";
	std::ofstream file(filename.c_str());
	if (file.is_open() == false){
		std::cout << "File could not be opened" << std::endl;
		throw;
	}
	file << "Sequence_nr" << ";" << "Latitude" << ";" << "Longitude" << ";" << "Altitude" << std::endl;
	for (int i = 0; i < length; i++){
		file << "N/A"  << ";" << x_lat[i] << ";" << y_long[i] << ";" << z_alt[i] << std::endl;
	}
}*/

/*--------------------------------------------------------------------------*/

/*main: Runs the subscribers. Upon exiting the programme, it runs the writers. */

int main(int argc, char **argv){
	ros::init(argc, argv, "listener");
	ros::NodeHandle n;
	Listener lstnr;
	TempWriter tmpwrtr;
	IMUWriter imuwrtr;
	MavPressWriter mavpresswrtr;
	MavTempWriter mavtmpwrtr;
	//MissionWaypointWriter mssnwptwrtr;
	ros::Subscriber sub1 = n.subscribe("imu/temp", 1000, &Listener::tempCallback, &lstnr);
	ros::Subscriber sub2 = n.subscribe("imu/raw", 1000, &Listener::imuCallback, &lstnr);
	ros::Subscriber sub3 = n.subscribe("mavros/imu/atm_pressure", 1000, &Listener::mavrosAtmPressureCallback, &lstnr);
	ros::Subscriber sub4 = n.subscribe("mavros/imu/temperature", 1000, &Listener::mavTempCallback, &lstnr);
	//ros::Subscriber sub5 = n.subscribe("mavros/mission/waypoints", 1000, &Listener::missionWaypointCallback, &lstnr);

	ros::spin();

	std::vector<float> tmp = lstnr.getTemperature();
	int length_temp = tmp.size();
	std::vector<int> seqnr_temp = lstnr.getSequenceNrTemp();
	std::vector<float> ang_vel_x = lstnr.getAngularVelocityX();
	std::vector<float> ang_vel_z = lstnr.getAngularVelocityY();
	std::vector<float> ang_vel_y = lstnr.getAngularVelocityZ();
	std::vector<float> orientation_x = lstnr.getOrientationX();
	std::vector<float> orientation_y = lstnr.getOrientationY();
	std::vector<float> orientation_z = lstnr.getOrientationZ();
	std::vector<float> orientation_w = lstnr.getOrientationW();
	std::vector<float> linear_acc_x = lstnr.getLinearAccelerationX();
	std::vector<float> linear_acc_y = lstnr.getLinearAccelerationY();
	std::vector<float> linear_acc_z = lstnr.getLinearAccelerationZ();
	int length_imu = ang_vel_x.size();
	std::vector<int> seqnr_angvel = lstnr.getSequenceNrImu();
	std::vector<float> fluid_pressure = lstnr.getPressure();
	int length_mav_press = fluid_pressure.size();
	std::vector<int> seqnr_fluid_pressure = lstnr.getSequenceNrMavPress();
	std::vector<float> mavtmp = lstnr.getMavTemperature();
	int length_mav_temp = mavtmp.size();
	std::vector<int> seqnr_mav_temp = lstnr.getMavSequenceNrTemp();
	//std::vector<float> x_lat = lstnr.getXLat();
	//std::vector<float> y_long = lstnr.getYLong();
	//std::vector<float> z_alt = lstnr.getZAlt();
	//int length_mssnwpt = x_lat.size();
	tmpwrtr.writer(tmp, length_temp, seqnr_temp);
	imuwrtr.writer(ang_vel_x, ang_vel_y, ang_vel_z, orientation_x, orientation_y, orientation_z, orientation_w, linear_acc_x, linear_acc_y, linear_acc_z, length_imu, seqnr_angvel);
	mavpresswrtr.writer(fluid_pressure, length_mav_press, seqnr_fluid_pressure);
	mavtmpwrtr.writer(mavtmp, length_mav_temp, seqnr_mav_temp);
	//mssnwptwrtr.writer(x_lat, y_long, z_alt, length_mssnwpt);
	

	return 0;
}
